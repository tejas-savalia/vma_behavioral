colnames(combined) = c("sample.mean", "CI.lower", "CI.upper")
return(combined)
}
knitr::opts_chunk$set(echo = TRUE)
library(sciplot)
library(lsr)
aliens <- read.csv ("aliens.csv", header = TRUE, stringsAsFactors = TRUE)
make.my.sample <- function(studentID, n, data) { RNGversion('3.2.1')
set.seed(studentID)
sample_values <- sample(size = n, c(1:nrow(data)))
my_sample <- data[data$ID %in% sample_values,]
return(my_sample)
}
my_sample <- suppressWarnings(make.my.sample(32246461, 50, aliens))
make.sampling.dist.ci <- function(studentID, n.indiv, data, n.samples, variable, conf.level) {
crit.t = qt(p = conf.level + ((1-conf.level)/2), df = n.indiv - 1)
sample.means <- 0
lower.bounds <- 0
upper.bounds <- 0
for (n in 1:n.samples) {
sample.num <- (studentID + (n-1))
my_sample <- suppressWarnings(make.my.sample(studentID = sample.num, n = n.indiv, data))
sample.mean <- mean(my_sample[,variable])
sample.se <- sd(my_sample[,variable])/sqrt(n.indiv)
lower.bound <- sample.mean - crit.t*sample.se
upper.bound <- sample.mean + crit.t*sample.se
sample.means[n] <- sample.mean
lower.bounds[n] <- lower.bound
upper.bounds[n] <- upper.bound
}
combined <- data.frame(sample.means, lower.bounds, upper.bounds)
colnames(combined) = c("sample.mean", "CI.lower", "CI.upper")
return(combined)
}
mean(my_sample$anxiety)
sd(my_sample$anxiety)
48.96+{1.96*(5.420897/sqrt(50))}
48.96-{1.96*(5.420897/sqrt(50))}
mean(my_sample$depression)
sd(my_sample$depression)
97.68-{1.96*(10.90673/sqrt(50))}
97.68+{1.96*(10.90673/sqrt(50))}
mean(my_sample$sociable)
sd(my_sample$sociable)
101.9-{1.96*(14.36158/sqrt(50))}
101.9+{1.96*(14.36158/sqrt(50))}
mean(my_sample$control)
sd(my_sample$control)
59.58-{1.96*(10.08553/sqrt(50))}
59.58+{1.96*(10.08553/sqrt(50))}
mean(my_sample$memory)
sd(my_sample$memory)
90.18-{1.96*(10.21142/sqrt(50))}
90.18+{1.96*(10.21142/sqrt(50))}
mean(my_sample$intelligence)
sd(my_sample$intelligence)
108.8-{1.96*(9.113435/sqrt(50))}
108.8+{1.96*(9.113435/sqrt(50))}
ciMean(my_sample$anxiety)
ciMean(my_sample$depression)
ciMean(my_sample$sociable)
ciMean(my_sample$control)
ciMean(my_sample$memory)
ciMean(my_sample$intelligence)
mean(aliens$anxiety)
mean(aliens$depression)
mean(aliens$sociable)
mean(aliens$control)
mean(aliens$memory)
mean(aliens$intelligence)
mean(aliens$intelligence)
foo<- make.sample.dist.ci(studentID=32246461, n.indiv=50, data=aliens, n.samples=100, variable="intelligence", conf.level = .95)
knitr::opts_chunk$set(echo = TRUE)
foo <- make.sampling.dist.ci(studentID = 00000001, n.indiv = 30, data = aliens, n.samples = 50, variable = "sleep", conf.level = .95)
foo
foo<- make.sample.dist.ci(studentID=32246461, n.indiv=50, data=aliens, n.samples=100, variable="intelligence", conf.level = .95)
knitr::opts_chunk$set(echo = TRUE)
library(sciplot)
library(lsr)
aliens <- read.csv ('aliens.csv', header = TRUE, stringsAsFactors = T) # Explicit argument for text as factor
make.my.sample <- function(studentID, n, data) {
RNGversion('3.2.1')
set.seed(studentID)
sample_values <- sample(size = n, c(1:nrow(data)))
my_sample <- data[data$ID %in% sample_values,]
return(my_sample)
}
my_sample <- suppressWarnings(make.my.sample(00000001, 50, aliens))
make.sampling.dist.ci <- function(studentID, n.indiv, data, n.samples, variable, conf.level) {
crit.t = qt(p = conf.level + ((1-conf.level)/2), df = n.indiv - 1)
sample.means <- 0
lower.bounds <- 0
upper.bounds <- 0
for (n in 1:n.samples) {
sample.num <- (studentID + (n-1))
my_sample <- suppressWarnings(make.my.sample(studentID = sample.num, n = n.indiv, data))
sample.mean <- mean(my_sample[,variable])
sample.se <- sd(my_sample[,variable])/sqrt(n.indiv)
lower.bound <- sample.mean - crit.t*sample.se
upper.bound <- sample.mean + crit.t*sample.se
sample.means[n] <- sample.mean
lower.bounds[n] <- lower.bound
upper.bounds[n] <- upper.bound
}
combined <- data.frame(sample.means, lower.bounds, upper.bounds)
colnames(combined) = c("sample.mean", "CI.lower", "CI.upper")
return(combined)
}
mean(my_sample$anxiety)
sd(my_sample$anxiety)
ciMean(my_sample$anxiety)
mean(aliens$anxiety)
foo<- make.sample.dist.ci(studentID=32246461, n.indiv=50, data=aliens, n.samples=100, variable="intelligence", conf.level = .95)
foo<- make.sample.dist.ci(studentID=3224646, n.indiv=50, data=aliens, n.samples=100, variable="intelligence", conf.level = .95)
make.sampling.dist.ci <- function(studentID, n.indiv, data, n.samples, variable, conf.level) {
crit.t = qt(p = conf.level + ((1-conf.level)/2), df = n.indiv - 1)
sample.means <- 0
lower.bounds <- 0
upper.bounds <- 0
for (n in 1:n.samples) {
sample.num <- (studentID + (n-1))
my_sample <- suppressWarnings(make.my.sample(studentID = sample.num, n = n.indiv, data))
sample.mean <- mean(my_sample[,variable])
sample.se <- sd(my_sample[,variable])/sqrt(n.indiv)
lower.bound <- sample.mean - crit.t*sample.se
upper.bound <- sample.mean + crit.t*sample.se
sample.means[n] <- sample.mean
lower.bounds[n] <- lower.bound
upper.bounds[n] <- upper.bound
}
combined <- data.frame(sample.means, lower.bounds, upper.bounds)
colnames(combined) = c("sample.mean", "CI.lower", "CI.upper")
return(combined)
}
mean(aliens$intelligence)
foo<- make.sample.dist.ci(studentID=32246461, n.indiv=50, data=aliens, n.samples=100, variable="intelligence", conf.level = .95)
knitr::opts_chunk$set(echo = TRUE)
library(sciplot)
library(lsr)
aliens <- read.csv ("aliens.csv", header = TRUE, stringsAsFactors = TRUE)
make.my.sample <- function(studentID, n, data) { RNGversion('3.2.1')
set.seed(studentID)
sample_values <- sample(size = n, c(1:nrow(data)))
my_sample <- data[data$ID %in% sample_values,]
return(my_sample)
}
my_sample <- suppressWarnings(make.my.sample(32246461, 50, aliens))
make.sampling.dist.ci <- function(studentID, n.indiv, data, n.samples, variable, conf.level) {
crit.t = qt(p = conf.level + ((1-conf.level)/2), df = n.indiv - 1)
sample.means <- 0
lower.bounds <- 0
upper.bounds <- 0
for (n in 1:n.samples) {
sample.num <- (studentID + (n-1))
my_sample <- suppressWarnings(make.my.sample(studentID = sample.num, n = n.indiv, data))
sample.mean <- mean(my_sample[,variable])
sample.se <- sd(my_sample[,variable])/sqrt(n.indiv)
lower.bound <- sample.mean - crit.t*sample.se
upper.bound <- sample.mean + crit.t*sample.se
sample.means[n] <- sample.mean
lower.bounds[n] <- lower.bound
upper.bounds[n] <- upper.bound
}
combined <- data.frame(sample.means, lower.bounds, upper.bounds)
colnames(combined) = c("sample.mean", "CI.lower", "CI.upper")
return(combined)
}
mean(my_sample$anxiety)
sd(my_sample$anxiety)
48.96+{1.96*(5.420897/sqrt(50))}
48.96-{1.96*(5.420897/sqrt(50))}
mean(my_sample$depression)
sd(my_sample$depression)
97.68-{1.96*(10.90673/sqrt(50))}
97.68+{1.96*(10.90673/sqrt(50))}
mean(my_sample$sociable)
sd(my_sample$sociable)
101.9-{1.96*(14.36158/sqrt(50))}
101.9+{1.96*(14.36158/sqrt(50))}
mean(my_sample$control)
sd(my_sample$control)
59.58-{1.96*(10.08553/sqrt(50))}
59.58+{1.96*(10.08553/sqrt(50))}
mean(my_sample$memory)
sd(my_sample$memory)
90.18-{1.96*(10.21142/sqrt(50))}
90.18+{1.96*(10.21142/sqrt(50))}
mean(my_sample$intelligence)
sd(my_sample$intelligence)
108.8-{1.96*(9.113435/sqrt(50))}
108.8+{1.96*(9.113435/sqrt(50))}
ciMean(my_sample$anxiety)
ciMean(my_sample$depression)
ciMean(my_sample$sociable)
ciMean(my_sample$control)
ciMean(my_sample$memory)
ciMean(my_sample$intelligence)
mean(aliens$anxiety)
mean(aliens$depression)
mean(aliens$sociable)
mean(aliens$control)
mean(aliens$memory)
mean(aliens$intelligence)
mean(aliens$intelligence)
foo<- make.sample.dist.ci(studentID=32246461, n.indiv=50, data=aliens, n.samples=100, variable="intelligence", conf.level = .95)
mean(aliens$intelligence)
foo<- make.sampling.dist.ci(studentID=32246461, n.indiv=50, data=aliens, n.samples=100, variable="intelligence", conf.level = .95)
foo
knitr::opts_chunk$set(echo = TRUE)
foo_1 <- make.sampling.dist.ci(studentID = 00000001, n.indiv = 5, data = aliens, n.samples = 100, variable = "sleep", conf.level = .95)
library(sciplot)
library(lsr)
aliens<-read.csv("aliens.csv", header=TRUE, stringsAsFactors = TRUE)
make.my.sample<-function(studentID, n, data){
RNGversion("3.2.1")
set.seed(studentID)
sample_values<-sample(size=n, c(1:nrow(data)))
my_sample<-data[data$ID %in% sample_values,]
return(my_sample)
}
my_sample<-suppressWarnings(make.my.sample(32122700, 50, aliens))
make.sampling.dist.ci <- function(studentID, n.indiv, data, n.samples, variable, conf.level){
crit.t = qt(p = conf.level + ((1-conf.level/2)), df=n.indiv - 1)
sample.means <- 0
lower.bounds <- 0
upper.bounds <- 0
for(n in 1:n.samples) {
sample.num<-(studentID+(n-1))
my_sample<-suppressWarnings(make.my.sample(studentID = sample.num, n=n.indiv, data))
sample.mean<- mean(my_sample[,variable])
sample.se<- sd(my_sample[,variable])/sqrt(n.indiv)
lower.bound<-sample.mean-crit.t*sample.se
upper.bound<-sample.mean+crit.t*sample.se
sample.means[n]<-sample.mean
lower.bounds[n]<- lower.bound
upper.bounds[n]<-upper.bound
}
combined<-data.frame(sample.means, lower.bounds, upper.bounds)
colnames(combined)=c("sample.mean", "CI.lower", "CI.upper")
return(combined)
}
foo_1 <- make.sampling.dist.ci(studentID = 00000001, n.indiv = 5, data = aliens, n.samples = 100, variable = "sleep", conf.level = .95)
foo_1
make.sampling.dist.ci <- function(studentID, n.indiv, data, n.samples, variable, conf.level) {
crit.t = qt(p = conf.level + ((1-conf.level)/2), df = n.indiv - 1)
sample.means <- 0
lower.bounds <- 0
upper.bounds <- 0
for (n in 1:n.samples) {
sample.num <- (studentID + (n-1))
my_sample <- suppressWarnings(make.my.sample(studentID = sample.num, n = n.indiv, data))
sample.mean <- mean(my_sample[,variable])
sample.se <- sd(my_sample[,variable])/sqrt(n.indiv)
lower.bound <- sample.mean - crit.t*sample.se
upper.bound <- sample.mean + crit.t*sample.se
sample.means[n] <- sample.mean
lower.bounds[n] <- lower.bound
upper.bounds[n] <- upper.bound
}
combined <- data.frame(sample.means, lower.bounds, upper.bounds)
colnames(combined) = c("sample.mean", "CI.lower", "CI.upper")
return(combined)
}
foo_1 <- make.sampling.dist.ci(studentID = 00000001, n.indiv = 5, data = aliens, n.samples = 100, variable = "sleep", conf.level = .95)
foo_1
make.sampling.dist.ci <- function(studentID, n.indiv, data, n.samples, variable, conf.level) {
crit.t = qt (p = conf.level + ((1-conf.level/2), df=n.indiv - 1)
make.sampling.dist.ci <- function(studentID, n.indiv, data, n.samples, variable, conf.level) {
crit.t = qt(p = conf.level + ((1-conf.level)/2), df = n.indiv - 1)
sample.means <- 0
lower.bounds <- 0
upper.bounds <- 0
for (n in 1:n.samples) {
sample.num <- (studentID + (n-1))
my_sample <- suppressWarnings(make.my.sample(studentID = sample.num, n = n.indiv, data))
sample.mean <- mean(my_sample[,variable])
sample.se <- sd(my_sample[,variable])/sqrt(n.indiv)
lower.bound <- sample.mean - crit.t*sample.se
upper.bound <- sample.mean + crit.t*sample.se
sample.means[n] <- sample.mean
lower.bounds[n] <- lower.bound
upper.bounds[n] <- upper.bound
}
combined <- data.frame(sample.means, lower.bounds, upper.bounds)
colnames(combined) = c("sample.mean", "CI.lower", "CI.upper")
return(combined)
}
knitr::opts_chunk$set(echo = TRUE)
library(lsr)
mean(aliens$anxiety)
knitr::opts_chunk$set(echo = TRUE)
aliens <- read.csv ('aliens.csv', header = TRUE, stringsAsFactors = T) # Explicit argument for text as factor
library(lsr)
make.my.sample <- function(studentID, n, data) {
RNGversion('3.2.1')
set.seed(studentID)
sample_values <- sample(size = n, c(1:nrow(data)))
my_sample <- data[data$ID %in% sample_values,]
return(my_sample)
}
my_sample <- suppressWarnings(make.my.sample(00000001, 50, aliens))
mean(aliens$anxiety)
mean(my_sample$anxiety)
ciMean(aliens$anxiety)
mean(aliens$anxiety)
hist(my_sample$income, breaks = 50)
hist(my_sample$income, breaks = 10)
hist(aliens$income, breaks = 10)
hist(aliens$income, breaks = 100)
install.packages('reticulate')
update R
install.packages('installR')
install.packages('installr')
library(installr)
upadteR()
updateR()
require('reticulate')
source_python("pickle_reader.py")
install.packages('reticulate')
require('reticulate')
source_python("pickle_reader.py")
pickle_data <- read_pickle_file
source_python("pickle_reader.py")
source_python("pickle_reader.py")
library(reticulate)
source_python("pickle_reader.py")
source_python("/pickle_reader.py")
read.csv("foo.csv")
read.csv("foo.csv")
read.csv("foo.csv")
setwd("~/")
setwd("~/Lab-Codes/Psychtoolbox/Visuomotor_Adaptation_Tablet/python_scripts")
read.csv("foo.csv")
foo1 = read.csv("foo.csv")
head(foo1)
rot_est_n = 90 - foo1$Curvature_y
foo1$rot_est_n = 90 - foo1$Curvature_y
head(foo1)
foo1$rot_est_n_1 = 90 - foo1$Curvature_x
library(e1071)
?lm
lm(foo1$rot_est_n~foo1$rot_est_n_1 + foo1$Curvature_x)
model = lm(foo1$rot_est_n~foo1$rot_est_n_1 + foo1$Curvature_x)
summary(model)
model = lm(foo1$rot_est_n~foo1$rot_est_n_1 * foo1$Curvature_x)
summary(model)
model = lm(foo1$rot_est_n~foo1$rot_est_n_1 + foo1$Curvature_x - 1)
summary(model)
foo1 = read.csv("foo.csv")
head(foo1)
foo1$rot_est_n = 90 - foo1$Curvature_y
foo1$rot_est_n_1 = 90 - foo1$Curvature_x
library(e1071)
model = lm(foo1$rot_est_n~foo1$rot_est_n_1 + foo1$Curvature_x - 1)
summary(model)
foo1 = read.csv("foo.csv")
head(foo1)
foo1$rot_est_n = 90 - foo1$Curvature_y
foo1$rot_est_n_1 = 90 - foo1$Curvature_x
foo1$rot_est_n = 90 - foo1$Curvature_y
foo1$rot_est_n_1 = 90 - foo1$Curvature_x
model = lm(foo1$rot_est_n~foo1$rot_est_n_1 + foo1$Curvature_x - 1)
summary(model)
foo1 = read.csv("foo.csv")
head(foo1)
foo1$rot_est_n = 90 - foo1$Curvature_y
foo1$rot_est_n_1 = 90 - foo1$Curvature_x
model = lm(foo1$rot_est_n~foo1$rot_est_n_1 + foo1$Curvature_x - 1)
summary(model)
foo1 = read.csv("foo.csv")
head(foo1)
foo1$rot_est_n = 90 - foo1$Curvature_y
foo1$rot_est_n_1 = 90 - foo1$Curvature_x
model = lm(foo1$rot_est_n~foo1$rot_est_n_1 + foo1$Curvature_x - 1)
summary(model)
model$coefficients
model$coefficients[1]
a = c(1, 2)
a = c(a, 2)
a
a = c(1)
a = c(a, 3)
a
?for
{}
??for
{}
"a" + "b"
"a"
"a" + b
A = c()
B = c()
for (participant in 1:60){
fname = paste("data_csvs/", toString(participant))
foo1 = read.csv(fname)
foo1$rot_est_n1 = 90 - foo1$Curvature_n1
foo1$rot_est_n = 90 - foo1$Curvature_n
model = lm(foo1$rot_est_n~foo1$rot_est_n1 + foo1$Curvature_n - 1)
A = c(A, model$coefficients[1])
B = c(B, model$coefficients[2])
}
for (participant in 1:60){
fname = paste("data_csvs/", toString(participant), ".csv")
foo1 = read.csv(fname)
foo1$rot_est_n1 = 90 - foo1$Curvature_n1
foo1$rot_est_n = 90 - foo1$Curvature_n
model = lm(foo1$rot_est_n~foo1$rot_est_n1 + foo1$Curvature_n - 1)
A = c(A, model$coefficients[1])
B = c(B, model$coefficients[2])
}
for (participant in 1:60){
toString(participant)
fname = paste("data_csvs/", toString(participant), ".csv")
foo1 = read.csv(fname)
foo1$rot_est_n1 = 90 - foo1$Curvature_n1
foo1$rot_est_n = 90 - foo1$Curvature_n
model = lm(foo1$rot_est_n~foo1$rot_est_n1 + foo1$Curvature_n - 1)
A = c(A, model$coefficients[1])
B = c(B, model$coefficients[2])
}
for (participant in 1:60){
toString(participant)
fname = paste("data_csvs/train_", toString(participant), ".csv")
foo1 = read.csv(fname)
foo1$rot_est_n1 = 90 - foo1$Curvature_n1
foo1$rot_est_n = 90 - foo1$Curvature_n
model = lm(foo1$rot_est_n~foo1$rot_est_n1 + foo1$Curvature_n - 1)
A = c(A, model$coefficients[1])
B = c(B, model$coefficients[2])
}
participant = 1
toString(participant)
for (participant in 1:60){
toString(participant)
fname = paste("data_csvs/train_", toString(participant), ".csv", sep = "")
foo1 = read.csv(fname)
foo1$rot_est_n1 = 90 - foo1$Curvature_n1
foo1$rot_est_n = 90 - foo1$Curvature_n
model = lm(foo1$rot_est_n~foo1$rot_est_n1 + foo1$Curvature_n - 1)
A = c(A, model$coefficients[1])
B = c(B, model$coefficients[2])
}
for (participant in 1:60){
fname = paste("data_csvs/train_", toString(participant - 0), ".csv", sep = "")
foo1 = read.csv(fname)
foo1$rot_est_n1 = 90 - foo1$Curvature_n1
foo1$rot_est_n = 90 - foo1$Curvature_n
model = lm(foo1$rot_est_n~foo1$rot_est_n1 + foo1$Curvature_n - 1)
A = c(A, model$coefficients[1])
B = c(B, model$coefficients[2])
}
A = c()
B = c()
for (participant in 1:60){
fname = paste("data_csvs/train_", toString(participant - 1), ".csv", sep = "")
foo1 = read.csv(fname)
foo1$rot_est_n1 = 90 - foo1$Curvature_n1
foo1$rot_est_n = 90 - foo1$Curvature_n
model = lm(foo1$rot_est_n~foo1$rot_est_n1 + foo1$Curvature_n - 1)
A = c(A, model$coefficients[1])
B = c(B, model$coefficients[2])
}
A
mean(A)
mean(B)
A = c()
B = c()
for (participant in 1:60){
fname = paste("data_csvs/train_", toString(participant - 1), ".csv", sep = "")
foo1 = read.csv(fname)
foo1$rot_est_n1 = 90 - foo1$Curvature_n1
foo1$rot_est_n = 90 - foo1$Curvature_n
if (participant - 1 % 4 == 0 || participant - 1 % 4 == 1) {
model = lm(foo1$rot_est_n~foo1$rot_est_n1 + foo1$Curvature_n - 1)
}
A = c(A, model$coefficients[1])
B = c(B, model$coefficients[2])
}
A = c()
B = c()
for (participant in 1:60){
fname = paste("data_csvs/train_", toString(participant - 1), ".csv", sep = "")
foo1 = read.csv(fname)
foo1$rot_est_n1 = 90 - foo1$Curvature_n1
foo1$rot_est_n = 90 - foo1$Curvature_n
if (participant - 1 %% 4 == 0 || participant - 1 %% 4 == 1) {
model = lm(foo1$rot_est_n~foo1$rot_est_n1 + foo1$Curvature_n - 1)
}
A = c(A, model$coefficients[1])
B = c(B, model$coefficients[2])
}
mean(A)
mean(B)
A
plt.plot(A)
plot(A)
plot(B)
library(e1071)
A = c()
B = c()
for (participant in 1:60){
fname = paste("data_csvs/train_", toString(participant - 1), ".csv", sep = "")
foo1 = read.csv(fname)
foo1$rot_est_n1 = 90 - foo1$Curvature_n1
foo1$rot_est_n = 90 - foo1$Curvature_n
if (participant - 1 %% 4 == 0 || participant - 1 %% 4 == 1) {
model = lm(foo1$rot_est_n~foo1$rot_est_n1 + foo1$Curvature_n - 1)
}
A = c(A, model$coefficients[1])
B = c(B, model$coefficients[2])
}
model
